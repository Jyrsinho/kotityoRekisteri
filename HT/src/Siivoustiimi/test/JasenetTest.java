package Siivoustiimi.test;
import Siivoustiimi.*;

import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;

/**
 * Test class made by ComTest
 * @version 2024.06.08 11:34:53 // Generated by ComTest
 *
 */
@SuppressWarnings({ "PMD" })
public class JasenetTest {
    Siivoustiimi siivoustiimi1 = new Siivoustiimi();
    private Jasenet jasenet;
    private String tiedNimi;
    private File ftied;


    @Before
    public void alusta() throws SailoException {
        siivoustiimi1 = new Siivoustiimi();
        tiedNimi = "testi";
        ftied = new File(tiedNimi + ".db");
        ftied.delete();
        jasenet = new Jasenet(tiedNimi);
        siivoustiimi1.lueTiedostosta(tiedNimi);
    }


    @After
    public void siivoa() {
        ftied.delete();
    }


    @Test
    public void shouldAddMembersToTable() throws SailoException {

        Collection<Jasen> loytyneet = jasenet.etsi("", 1);
        assertEquals(0, loytyneet.size());

        Jasen timo1 = new Jasen(), timo2 = new Jasen();
        timo1.taytaJasen();
        timo2.taytaJasen();
        jasenet.lisaa(timo1);
        jasenet.lisaa(timo2);

        loytyneet = jasenet.etsi("", 1);
        assertEquals(2, loytyneet.size());

        Jasen timo3 = new Jasen();
        timo3.taytaJasen();
        Jasen timo4 = new Jasen();
        timo4.taytaJasen();
        Jasen timo5 = new Jasen();
        timo5.taytaJasen();
        jasenet.lisaa(timo3);

        jasenet.lisaa(timo4);
        jasenet.lisaa(timo5);
        loytyneet = jasenet.etsi("", 1);

        assertEquals(5, loytyneet.size());
    }
}

/*

  @Test
  public void testAnnaJasenenId39() throws SailoException {    // Jasenet: 39
    Jasenet jasenet = new Jasenet(); 
    Jasen uusi = new Jasen(); Jasen uusi2 = new Jasen(); Jasen uusi3 = new Jasen(); 
    uusi.taytaJasen(); uusi2.taytaJasen(); uusi3.taytaJasen(); 
    uusi.rekisteroi(); uusi2.rekisteroi(); uusi3.rekisteroi(); 
    uusi2.setEtunimi("Kari"); uusi2.setSukunimi("Karila"); 
    jasenet.lisaa(uusi); jasenet.lisaa(uusi2); jasenet.lisaa(uusi3); 
    jasenet.annaJasenenId("Kari Karila"); 
  } // Generated by ComTest END



  @Test
  public void testEtsiId189() {    // Jasenet: 189
    Siivoustiimi siivoustiimi = new Siivoustiimi(); 
    Jasenet jasenet = new Jasenet(); 
    Jasen timo1 = new Jasen(); Jasen timo2 = new Jasen(); Jasen timo3 = new Jasen(); 
    timo1.rekisteroi(); timo2.rekisteroi(); timo3.rekisteroi(); 
    jasenet.lisaa(timo1); jasenet.lisaa(timo2); jasenet.lisaa(timo3); 
    assertEquals("From: Jasenet line: 195", 3, jasenet.getLkm()); 
    assertEquals("From: Jasenet line: 196", 0, jasenet.etsiId(timo1.getId())); 
    assertEquals("From: Jasenet line: 197", -1, jasenet.etsiId(5)); 
  } // Generated by ComTest END



  @Test
  public void testPoista211() {    // Jasenet: 211
    Jasenet jasenet = new Jasenet(); 
    Jasen timo1 = new Jasen(); Jasen timo2 = new Jasen(); Jasen timo3 = new Jasen(); 
    jasenet.lisaa(timo1); jasenet.lisaa(timo2); jasenet.lisaa(timo3); 
    timo1.rekisteroi(); timo2.rekisteroi(); timo3.rekisteroi(); 
    assertEquals("From: Jasenet line: 216", 3, jasenet.getLkm()); 
    jasenet.poista(1); 
    assertEquals("From: Jasenet line: 218", 2, jasenet.getLkm()); 
  } // Generated by ComTest END



  @Test
  public void testLisaa254() throws SailoException {    // Jasenet: 254
    Jasenet jasenet = new Jasenet(); 
    Jasen timo1 = new Jasen(), timo2 = new Jasen(); 
    assertEquals("From: Jasenet line: 258", 0, jasenet.getLkm()); 
    jasenet.lisaa(timo1); assertEquals("From: Jasenet line: 259", 1, jasenet.getLkm()); 
    jasenet.lisaa(timo2); assertEquals("From: Jasenet line: 260", 2, jasenet.getLkm()); 
    jasenet.lisaa(timo1); assertEquals("From: Jasenet line: 261", 3, jasenet.getLkm()); 
    assertEquals("From: Jasenet line: 262", timo1, jasenet.anna(0)); 
    assertEquals("From: Jasenet line: 263", timo2, jasenet.anna(1)); 
    assertEquals("From: Jasenet line: 264", timo1, jasenet.anna(2)); 
    assertEquals("From: Jasenet line: 265", false, jasenet.anna(1) ==timo1); 
    assertEquals("From: Jasenet line: 266", true, jasenet.anna(1) ==timo2); 
    try {
    assertEquals("From: Jasenet line: 267", timo1, jasenet.anna(3)); 
    fail("Jasenet: 267 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    jasenet.lisaa(timo1); assertEquals("From: Jasenet line: 268", 4, jasenet.getLkm()); 
    jasenet.lisaa(timo1); assertEquals("From: Jasenet line: 269", 5, jasenet.getLkm()); 
  } // Generated by ComTest END



  @Test
  public void testJasenetIterator327() {    // Jasenet: 327
    Jasenet jasenet = new Jasenet(); 
    Jasen timo1 = new Jasen(); jasenet.lisaa(timo1); 
    Jasen timo2 = new Jasen(); jasenet.lisaa(timo2); 
    Jasen timo3 = new Jasen(); jasenet.lisaa(timo3); 
    Jasen timo4 = new Jasen(); jasenet.lisaa(timo4); 
    Jasen timo5 = new Jasen(); jasenet.lisaa(timo5); 
    Iterator<Jasen> i2=jasenet.iterator(); 
    assertEquals("From: Jasenet line: 339", timo1, i2.next()); 
    assertEquals("From: Jasenet line: 340", timo2, i2.next()); 
    assertEquals("From: Jasenet line: 341", timo3, i2.next()); 
    assertEquals("From: Jasenet line: 342", timo4, i2.next()); 
    assertEquals("From: Jasenet line: 343", timo5, i2.next()); 
  } // Generated by ComTest END
}

 */